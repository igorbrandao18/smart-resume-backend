import axios from 'axios';
import * as readline from 'readline';
import { promisify } from 'util';

const API_URL = 'http://localhost:3000';
const sleep = promisify(setTimeout);

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

const question = (query: string) => new Promise((resolve) => rl.question(query, resolve));

async function displayMenu(): Promise<string> {
  console.log('\nüîπ Sistema de Cadastro de Usu√°rios üîπ');
  console.log('1. Criar novo usu√°rio');
  console.log('2. Verificar email');
  console.log('3. Reenviar c√≥digo de verifica√ß√£o');
  console.log('4. Atualizar dados do usu√°rio');
  console.log('5. Buscar usu√°rio por ID');
  console.log('6. Sair');
  
  const option = await question('\nEscolha uma op√ß√£o (1-6): ');
  return option;
}

async function createUser() {
  console.log('\nüìù Cadastro de novo usu√°rio');
  const name = await question('Nome: ');
  const email = await question('Email: ');
  const phone = await question('Telefone: ');

  try {
    const response = await axios.post(`${API_URL}/users`, {
      name,
      email,
      phone
    });

    console.log('\n‚úÖ Usu√°rio criado com sucesso!');
    console.log('ID:', response.data.id);
    console.log('C√≥digo de verifica√ß√£o:', response.data.verificationCode);
    return response.data;
  } catch (error) {
    if (axios.isAxiosError(error)) {
      console.error('\n‚ùå Erro:', error.response?.data?.message || error.message);
    }
  }
}

async function verifyEmail() {
  console.log('\nüîê Verifica√ß√£o de email');
  const userId = await question('ID do usu√°rio: ');
  const code = await question('C√≥digo de verifica√ß√£o: ');

  try {
    const response = await axios.post(`${API_URL}/users/verify-email/${userId}`, { code });
    console.log('\n‚úÖ Email verificado com sucesso!');
    return response.data;
  } catch (error) {
    if (axios.isAxiosError(error)) {
      console.error('\n‚ùå Erro:', error.response?.data?.message || error.message);
    }
  }
}

async function resendVerificationCode() {
  console.log('\nüìß Reenvio de c√≥digo de verifica√ß√£o');
  const email = await question('Email: ');

  try {
    await axios.post(`${API_URL}/users/resend-verification`, { email });
    console.log('\n‚úÖ Novo c√≥digo enviado com sucesso!');
  } catch (error) {
    if (axios.isAxiosError(error)) {
      console.error('\n‚ùå Erro:', error.response?.data?.message || error.message);
    }
  }
}

async function updateUser() {
  console.log('\nüìù Atualiza√ß√£o de dados');
  const userId = await question('ID do usu√°rio: ');
  const secondaryEmail = await question('Email secund√°rio (opcional): ');
  const cnpj = await question('CNPJ (opcional): ');
  const zipCode = await question('CEP: ');

  const updateData: any = {};
  if (secondaryEmail) updateData.secondaryEmail = secondaryEmail;
  if (cnpj) updateData.cnpj = cnpj;
  if (zipCode) updateData.zipCode = zipCode;

  try {
    const response = await axios.put(`${API_URL}/users/${userId}`, updateData);
    console.log('\n‚úÖ Dados atualizados com sucesso!');
    console.log(JSON.stringify(response.data, null, 2));
  } catch (error) {
    if (axios.isAxiosError(error)) {
      console.error('\n‚ùå Erro:', error.response?.data?.message || error.message);
    }
  }
}

async function findUser() {
  console.log('\nüîç Busca de usu√°rio');
  const userId = await question('ID do usu√°rio: ');

  try {
    const response = await axios.get(`${API_URL}/users/${userId}`);
    console.log('\n‚úÖ Usu√°rio encontrado:');
    console.log(JSON.stringify(response.data, null, 2));
  } catch (error) {
    if (axios.isAxiosError(error)) {
      console.error('\n‚ùå Erro:', error.response?.data?.message || error.message);
    }
  }
}

async function main() {
  try {
    while (true) {
      const option = await displayMenu();

      switch (option) {
        case '1':
          await createUser();
          break;
        case '2':
          await verifyEmail();
          break;
        case '3':
          await resendVerificationCode();
          break;
        case '4':
          await updateUser();
          break;
        case '5':
          await findUser();
          break;
        case '6':
          console.log('\nüëã At√© logo!');
          rl.close();
          return;
        default:
          console.log('\n‚ùå Op√ß√£o inv√°lida!');
      }

      await sleep(1000);
    }
  } catch (error) {
    console.error('\n‚ùå Erro inesperado:', error);
  } finally {
    rl.close();
  }
}

// Inicia o programa
main(); 